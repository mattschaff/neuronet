#!/usr/bin/env bash

# Deploys mattschaff/master branch to 'staging', builds, and swithces
# the 'prod' and 'staging' symlinks so the newly-built site is live.
# To use a different branch, provide it as an argument.
# Can also specify both remote and branch, where
# 'origin' = mattschaff and 'dev' = upenn-glia.

if [ $# -gt 2 ]
then
    echo 'Too many arguments (syntax: fin deploy-prod [BRANCH=master])' >&2
    exit 1
fi

if [ -z "$PROJECT_ROOT" ]
then
    echo "Error: PROJECT_ROOT not defined. Run as 'fin deploy-prod'." >&2
    echo "Or, if you're not using Docksal, just define PROJECT_ROOT=<dir containing composer.json>" >&2
    exit 1
fi

if [ -z "$NEURONET_SSH_USER" ]
then
	read -rp "Enter your PMACS server username: "
	export NEURONET_SSH_USER=$REPLY
fi


# Identify which branch we're using
remote=origin
if [ $# -eq 2 ]
then
    remote=$1
    shift
fi

branch=master
if [ $# -eq 1 ]
then
    branch=$1
    shift
fi

# Check connection
echo "Checking that we're good to go..."
"$PROJECT_ROOT"/.docksal/commands/check-vpn || exit $?

drush=$PROJECT_ROOT/vendor/bin/drush

# Make sure the real site is back online after exiting
bring_prod_back_online()
{
    echo "Taking the prod site out of maintenance mode..."
    $drush @self.prod sset system.maintenance_mode FALSE
}

# Remember, this should be done before dumping/checking the states of databases
# to avoid race conditions.
echo "Putting prod site in maintenance mode..."
$drush @self.prod sset system.maintenance_mode TRUE
trap bring_prod_back_online EXIT

# check whether prod site has unexported config
config_check_code=$(cat << EOF
	drush=\$(pwd)/../vendor/bin/drush &&

	if [ \$(\$drush config:status --format=list 2>/dev/null | wc -w) -ne 0 ];
	then
		exit 1;
	else
		exit 0;
	fi
EOF
)

echo "Checking whether config needs to be exported..."
if ! $drush @self.prod ssh "$config_check_code" 2>/dev/null
then
    echo "Warning: prod DB does not match current config files!"
    echo "You should probably see if you need to commit a config file change before deploying, unless you know it can be discarded."

    select action in "Stop" "Continue"; do
        case $action in
            Stop ) exit 1;;
            Continue ) break;;
        esac
    done
fi

now=$(date +%F_%T)
prod_dump=/home/neuronet/backups/prod_$now.sql
echo "Backing up prod database to $prod_dump..."
if ! $drush @self.prod sql-dump --result-file="$prod_dump"
then
    echo "Prod dump failed - fix issue before continuing."
    exit 1
fi

# Deploy to staging site and build
echo "Deploying $remote/$branch to the staging site."

echo 'SSHing to staging site...'
server_code=$(cat << EOF
    cd .. &&

    echo &&
    echo Checking out branch $remote/$branch on the staging site... &&
    git fetch $remote &&
    git checkout -f $remote/$branch &&
    git reset --hard &&
    git branch -f $branch &&
    git checkout $branch &&

    echo &&
    echo Running composer install... &&
    composer validate && composer install --prefer-dist --no-progress --no-suggest &&

    cleanup() {
        echo Database problem - restoring backup;
        drush sql-drop -y &&
        drush sql-query --file=$prod_dump;
    } &&

    trap cleanup EXIT &&

	echo &&
	echo Cache-rebuilding... &&
	drush cr &&

    echo &&
    echo Importing config on prod site... &&
    drush cim -y &&

    echo &&
    echo Updating prod database... &&
    drush updb -y &&

    echo Cache-rebuilding... &&
    drush cr &&

    trap - EXIT &&

    echo Backing up current prod site before switching...;
    cd .. &&
    rsync -a --delete prod/ prod_backup;

    echo Switching test and staging symlinks;
    ./switch-prod.sh;

    echo Prod deployed! Make sure https://www.neuronetupenn.org looks right.
EOF
)

$drush @self.staging --tty ssh "sudo -u neuronet bash -ic '$server_code'"
