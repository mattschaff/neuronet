<?php

/**
 * @file
 * Contains neuronet_misc.install.
 */

/**
 * Implements hook_schema().
 */
function neuronet_misc_schema() {
  // Defines the table that stores the number of completed fields.
  $schema['completed_profile_fields'] = [
    'description' => 'Stores the number of completed fields for profile nodes.',
    'fields' => [
      'nid' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Node ID of the profile.',
      ],
      'num_completed_fields' => [
        'type' => 'int',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'Number of completed fields.',
      ],
    ],
    'primary key' => ['nid'],
    'indexes' => [
      'nid' => ['nid'],
      'num_completed_fields' => ['num_completed_fields'],
    ],
  ];
  return $schema;
}

 /**
  * Update users to all have notifications settings set to true.
  */
function neuronet_misc_update_8001(&$sandbox) {
  $db_connection = \Drupal::database();
  // Use the sandbox at your convenience to store the information needed
  // to track progression between successive calls to the function.
  if (!isset($sandbox['progress'])) {
    // The count of users visited so far.
    $sandbox['progress'] = 0;
    // Total users that must be visited.
    $sandbox['max'] = $db_connection
      ->query('SELECT COUNT(uid) FROM {users}')
      ->fetchField();
    // A place to store messages during the run.
    $sandbox['messages'] = [];
    // Last node read via the query.
    $sandbox['current_user_id'] = -1;
  }
  // Process users by groups of 20 (arbitrary value).
  // When a group is processed, the batch update engine determines
  // whether it should continue processing in the same request or provide
  // progress feedback to the user and wait for the next request.
  $limit = 20;
  // Retrieve the next group of uids.
  $result = $db_connection
    ->select('users', 'u')
    ->fields('u', [
      'uid',
    ])
    ->where('u.uid > :uid', [
      ':uid' => $sandbox['current_user_id'],
    ])
    ->range(0, $limit)
    ->orderBy('u.uid', 'ASC')
    ->execute();
  foreach ($result as $row) {
    /** @var \Drupal\user\UserInterface $user */
    if ($user = \Drupal::entityTypeManager()->getStorage('user')->load($row->uid)) {
      $user->set('field_general_emails', true);
      $user->set('field_job_posting_emails', true);
      $user->save();
    }
    // Update our progress information.
    $sandbox['progress']++;
    $sandbox['current_user_id'] = $row->uid;
  }
  // Set the "finished" status, to tell batch engine whether this function
  // needs to run again. If you set a float, this will indicate the progress
  // of the batch so the progress bar will update.
  $sandbox['#finished'] = $sandbox['progress'] >= $sandbox['max'] ? TRUE : $sandbox['progress'] / $sandbox['max'];
  // Set up a per-run message; Make a copy of $sandbox so we can change it.
  // This is simply a debugging stanza to illustrate how to capture status
  // from each pass through hook_update_N().
  $sandbox_status = $sandbox;
  // Don't want them in the output.
  unset($sandbox_status['messages']);
  $sandbox['messages'][] = t('$sandbox=') . print_r($sandbox_status, TRUE);
  if ($sandbox['#finished']) {
    // hook_update_N() may optionally return a string which will be displayed
    // to the user.
    $final_message = '<ul><li>' . implode('</li><li>', $sandbox['messages']) . "</li></ul>";
    return t('The batch_example demonstration update did what it was supposed to do: @message', [
      '@message' => $final_message,
    ]);
  }
 }

 /**
  * Update users to all have the user role 'current_student' added.
  */
function neuronet_misc_update_8002(&$sandbox) {
  $db_connection = \Drupal::database();
  // Use the sandbox at your convenience to store the information needed
  // to track progression between successive calls to the function.
  if (!isset($sandbox['progress'])) {
    // The count of users visited so far.
    $sandbox['progress'] = 0;
    // Total users that must be visited.
    $sandbox['max'] = $db_connection
      ->query('SELECT COUNT(uid) FROM {users}')
      ->fetchField();
    // A place to store messages during the run.
    $sandbox['messages'] = [];
    // Last node read via the query.
    $sandbox['current_user_id'] = -1;
  }
  // Process users by groups of 20 (arbitrary value).
  // When a group is processed, the batch update engine determines
  // whether it should continue processing in the same request or provide
  // progress feedback to the user and wait for the next request.
  $limit = 20;
  // Retrieve the next group of uids.
  $result = $db_connection
    ->select('users', 'u')
    ->fields('u', [
      'uid',
    ])
    ->where('u.uid > :uid', [
      ':uid' => $sandbox['current_user_id'],
    ])
    ->range(0, $limit)
    ->orderBy('u.uid', 'ASC')
    ->execute();
  $entity_type_manager = \Drupal::entityTypeManager();
  foreach ($result as $row) {
    /** @var \Drupal\user\UserInterface $user */
    if ($user = $entity_type_manager->getStorage('user')->load($row->uid)) {
      if (!$user->get('field_profile')->isEmpty()) {
        /** @var \Drupal\node\NodeInterface $node */
        if ($node = $entity_type_manager->getStorage('node')->load($user->get('field_profile')->target_id)) {
          if (!$user->hasRole('alumni') && $node->get('field_exit_term')->isEmpty()) {
            $user->addRole('current_student');
            $user->save();
          }
        }
      }
    }
    // Update our progress information.
    $sandbox['progress']++;
    $sandbox['current_user_id'] = $row->uid;
  }
  // Set the "finished" status, to tell batch engine whether this function
  // needs to run again. If you set a float, this will indicate the progress
  // of the batch so the progress bar will update.
  $sandbox['#finished'] = $sandbox['progress'] >= $sandbox['max'] ? TRUE : $sandbox['progress'] / $sandbox['max'];
  // Set up a per-run message; Make a copy of $sandbox so we can change it.
  // This is simply a debugging stanza to illustrate how to capture status
  // from each pass through hook_update_N().
  $sandbox_status = $sandbox;
  // Don't want them in the output.
  unset($sandbox_status['messages']);
  $sandbox['messages'][] = t('$sandbox=') . print_r($sandbox_status, TRUE);
  if ($sandbox['#finished']) {
    // hook_update_N() may optionally return a string which will be displayed
    // to the user.
    $final_message = '<ul><li>' . implode('</li><li>', $sandbox['messages']) . "</li></ul>";
    return t('All current users have had the current user role added: @message', [
      '@message' => $final_message,
    ]);
  }
 }

/**
 * Create completed_fields table if it doesn't exists
 */
function neuronet_misc_update_8003() {
  $t_name = 'completed_profile_fields';
  $operator = 'was not';
  if (!\Drupal::database()->schema()->tableExists($t_name)) {
    $schema = neuronet_misc_schema();
    $schema_table = $schema[$t_name];
    try {
      \Drupal::database()->schema()->createTable($t_name, $schema_table);
      $operator = 'was';
    }
    catch(\Exception $e) {
      $error = 'Error: ' . $e->getMessage();
      $operator = 'was not';
    }
  }
  return t('The database table @name @operator created. @error', [
    '@name' => $t_name,
    '@operator' => $operator,
    '@error' => $error,
    ]
  );
}

 /**
  * Save completed fields by profile node.
  */
  function neuronet_misc_update_8004(&$sandbox) {
    $entity_batch_update = \Drupal::service('neuronet_misc.entity_batch_update');
    // Get & configure entity query for profiles.
    $query = $entity_batch_update->getEntityQuery('node');
    $query = $query->condition('type', 'profile');
    // Set node-wise callback service (could us a static function).
    $callback_service = \Drupal::service('neuronet_misc.completed_fields');
    // Run batch.
    $result_message = $entity_batch_update->runUpdate($sandbox, $query, 20, $callback_service);
    if ($result_message) {
      return $result_message;
    }
  }

/**
 * Set the job node author to the user associated w/ the profile field value.
 */
function neuronet_misc_update_8005(&$sandbox) {
  $entity_batch_update = \Drupal::service('neuronet_misc.entity_batch_update');
  // Get & configure entity query for jobs.
  $query = $entity_batch_update->getEntityQuery('node');
  $query = $query->condition('type', 'job');
  // Set node-wise callback service (could us a static function).
  $callback_service = \Drupal::service('neuronet_misc.job_authorship');
  // Run batch.
  $result_message = $entity_batch_update->runUpdate($sandbox, $query, 20, $callback_service);
  if ($result_message) {
    return $result_message;
  }
}

/**
 * Re-save each profile to fill the computed preferred first name field
 */
function neuronet_misc_update_8006(&$sandbox) {
  $entity_batch_update = \Drupal::service('neuronet_misc.entity_batch_update');
  // Get & configure entity query for profiles
  /** @var \Drupal\Core\Entity\Query\QueryInterface $query */
  $query = $entity_batch_update->getEntityQuery('node');
  $query = $query->condition('type', 'profile');
  // Set node-wise callback service
  $callback_service = \Drupal::service('neuronet_misc.refresh_fields');
  $callback_service->addField('field_preferred_first_name_comp');
  // Run batch.
  $result_message = $entity_batch_update->runUpdate($sandbox, $query, 20, $callback_service);
  if ($result_message) {
    return $result_message;
  }
}

// /**
//  * Set each job's end date (new field) to the next later job's start date, if any
//  */
// function neuronet_misc_update_8007(&$sandbox) {
  
// }